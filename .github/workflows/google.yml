# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when a release is created
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project and GKE_SA_KEY with the Base64 encoded JSON service account key (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs).
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER, IMAGE, and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke

name: Build and Deploy to GKE

on:
  release:
    types: [created]
  push:
    branches: [ interview-test ]
  pull_request:
    branches: [ master ]

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: tikal-interview # TODO: update to cluster name
  GKE_ZONE: us-central1-c   # TODO: update to cluster zone
  DEPLOYMENT_NAME: fcc-basic-node-and-express # TODO: update to deployment name
  IMAGE: fcc-basic-node-and-express

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker

    # Get the GKE credentials so we can deploy to the cluster
    - uses: google-github-actions/get-gke-credentials@v0.2.1
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}

    # Build the Docker image
    - name: Build
      run: |-
        docker build \
          --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .

    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |-
        docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"



    # - name: Helm Deploy
    #   uses: vimeda/helm@v1.6.1
    #   with:
    #     # Helm release name. Will be combined with track if set.
    #     release: DEPLOYMENT_NAME
    #     # Kubernetes namespace name.
    #     namespace: dev
    #     # Helm chart path. If set to "app" this will use the built in helm chart found in this repository.
    #     chart: ./myapps/
    #     # Helm chart values, expected to be a YAML or JSON string.
    #     values: # optional
    #     # Task name. If the task is "remove" it will remove the configured helm release.
    #     dry-run: # optional
    #     # Github repository token. If included and the event is a deployment the deployment_status event will be fired.
    #     token: # optional
    #     # Additional value files to apply to the helm chart. Expects JSON encoded array or a string.
    #     value-files: # optional
    #     # Secret variables to include in value file interpolation. Expects JSON encoded map.
    #     secrets: # optional
    #     # Version of the app, usually commit sha works here.
    #     version: # optional
    #     # Helm chart repository to be added.
    #     repo: # optional
    #     # Helm repository alias that will be used.
    #     repo-alias: # optional
    #     # Helm repository username if authentication is needed.
    #     repo-username: # optional
    #     # Helm repository password if authentication is needed.
    #     repo-password: # optional
    # Set up kustomize
    - name: Set up Helm
      run: |-
        cd ..
        wget https://get.helm.sh/helm-v3.5.0-linux-amd64.tar.gz
        tar xvzf helm-v3.5.0-linux-amd64.tar.gz
        cd FCC-Basic-Node-and-Express
        cp ../linux-amd64/helm ./helm
        chmod u+x ./helm

    - name: Install app helm chart
      run: |-
        chmod u+x ./install/install-chart.sh
        # ls -la
        # pwd
        # ls -la ..
        cd install
        ./install/install-chart.sh 1.0.2 install
    

#     # Deploy the Docker image to the GKE cluster
#     - name: Deploy
#       run: |-
#         ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
#         ./kustomize build . | kubectl apply -f -
#         kubectl rollout status deployment/$DEPLOYMENT_NAME
#         kubectl get services -o wide